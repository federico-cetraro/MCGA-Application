@model MCGA.Data.Turno
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Turno</h4>
        <hr />

        @if (User.IsInRole("Paciente"))
        {
            @Html.LabelFor(model => model.AfiliadoId, null, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("BuscarAfiliado", (string)ViewBag.AfiliadoLogueadoNombreApellido,
             new
             {
                 @class = "form-control disabled",
                 autocomplete = "off",
                 placeholder = "Ingrese el afiliado",
                 @readonly = "readonly"
             })
                @Html.Hidden("AfiliadoId", (string)ViewBag.AfiliadoLogueadoId)
            </div>
        }
        else
        {
            @Html.LabelFor(model => model.AfiliadoId, null, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("BuscarAfiliado", null,
             new
             {
                 @class = "form-control",
                 autocomplete = "off",
                 placeholder = "Ingrese el afiliado",
             })
                @Html.ValidationMessageFor(model => model.AfiliadoId, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.AfiliadoId)
            </div>
        }
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EspecialidadProfesionalId, "EspecialidadProfesional", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBox("BuscarEspecialidad", null,
         new
         {
             @class = "form-control",
             autocomplete = "off",
             placeholder = "Ingrese la especialidad",
         })
            @Html.Hidden("EspecialidadId")
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Profesional", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBox("BuscarProfesional", null,
         new
         {
             @class = "form-control",
             autocomplete = "off",
             placeholder = "Ingrese el profesional",
         })
            @Html.ValidationMessageFor(model => model.EspecialidadProfesionalId, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.EspecialidadProfesionalId)
        </div>
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.Label("Fecha", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div id="datepickerFecha"></div>
            @Html.HiddenFor(model => model.Fecha)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Hora, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select id="cboHorario" class="form-control" onchange="$('#Hora').val($('#cboHorario').val());"></select>
            @Html.HiddenFor(model => model.Hora)
        </div>
    </div>
    <div class="col-md-10">
        @Html.DropDownList("reserva", null, "-Seleccionar reserva-", htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.reserva, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Observaciones, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-12" id="Observaciones">
            @Html.ValidationMessageFor(model => model.Observaciones, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>

}

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>


    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/jquery")


        <script src="~/Scripts/tinymce/tinymce.min.js"></script>
        <script src="~/Scripts/tinymce/jquery.tinymce.min.js"></script>
        <script>
            tinymce.init({
                selector: "div#Observaciones",

            });
        </script>
        <script>
        $("#BuscarEspecialidad").autocomplete({
            autoSelect: true,
            autoFocus: true,
            minLength: 1,
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetEspecialidad", "Especialidad")',
                    datatype: "json",
                    data: { Areas: '', term: request.term },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return { label: val.Name, value: val.Name, Id: val.Id };
                        }));
                    }
                });
            },
            select: function (event, ui) {
                $("#EspecialidadId").val(ui.item.Id);
                $("#EspecialidadProfesionalId").val('');
                $("#BuscarProfesional").val('');
            }
        });
        $("#BuscarProfesional").autocomplete({
            autoSelect: true,
            autoFocus: true,
            minLength: 1,
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetEspecialidadProfesionalByEspecialidad", "EspecialidadesProfesional")',
                    datatype: "json",
                    data: { Areas: '', term: request.term, idEspecialidad: $("#EspecialidadId").val() },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return { label: val.Name, value: val.Name, Id: val.Id };
                        }));
                    }
                });
            },
            select: function (event, ui) {

                $("#EspecialidadProfesionalId").val(ui.item.Id);
                //Cargar fecha disponible del profesional especialidad
                CargarFechasDisponibles($("#EspecialidadProfesionalId").val());
            }
        });
        $("#BuscarAfiliado").autocomplete({
            autoSelect: true,
            autoFocus: true,
            minLength: 1,
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetAfiliado", "Afiliado")',
                    datatype: "json",
                    data: { Areas: '', term: request.term },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return { label: val.Name, value: val.Name, Id: val.Id };
                        }));
                    }
                });
            },
            select: function (event, ui) {
                $("#AfiliadoId").val(ui.item.Id);
            }
        });


        function CargarFechasDisponibles(idEspecialidadProfesional) {
            $.ajax({
                url: '@Url.Action("GetFechasDisponiblesByIdEspecialidadProfesional", "Agenda")',
                datatype: "json",
                async:false,
                data: { idEspecialidadProfesional: idEspecialidadProfesional},
                success: function (data) {
                    $("#datepickerFecha").datepicker(
                        $.extend({
                            changeMonth: true,
                            changeYear: true,
                            beforeShowDay: function (date) {
                                var string = jQuery.datepicker.formatDate('yy-mm-dd', date);
                                if (data.indexOf(string) != -1)
                                    return [true];
                                else
                                    return [false];
                            },
                            onSelect: function (date) {
                                $("#Fecha").val(date);
                                CargarHorarioDisponibles($('#EspecialidadProfesionalId').val(),date);
                            }
                        }, $.datepicker.regional["es"])
                    );
                }
            });
        }
        function CargarHorarioDisponibles(idEspecialidadProfesional, fechaString) {

            var listFecha = fechaString.split("/");
            var fecha = new Date(listFecha[2], listFecha[1] - 1, listFecha[0]);
            $.ajax({
                url: '@Url.Action("GetHorarioDisponiblesByIdEspecialidadProfesionalFecha", "Agenda")',
                datatype: "json",
                async:false,
                data: { idEspecialidadProfesional: idEspecialidadProfesional, fecha: moment(fecha).format("YYYY-MM-DD")},
                success: function (data) {

                    var datos = data;
                    $("#cboHorario").empty();
                    for (var i = 0; i < datos.length; i++) {
                        $("#cboHorario").append($('<option>', {
                            value: datos[i].HoraValue,
                            text: datos[i].HoraText
                        }));
                    }
                    $("#Hora").val($('#cboHorario').val());
                }
            });
        }
        </script>
    }


